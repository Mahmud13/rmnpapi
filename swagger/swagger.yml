swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /customers/:
    get:
      tags:
      - customers
      description: get all objects
      operationId: CustomerController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    post:
      tags:
      - customers
      description: create object
      operationId: CustomerController.Create
      parameters:
      - in: body
        name: body
        description: The object content
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: '{string} models.Object.Id'
        "403":
          description: body is empty
  /customers/{customerID}:
    get:
      tags:
      - customers
      description: find customer by customer ID
      operationId: CustomerController.Get
      parameters:
      - in: path
        name: customerID
        description: the customer id you want to get
        required: true
        type: string
      responses:
        "200":
          description: '{customer} models.Customer'
        "403":
          description: :customerID is empty
  /customers/{customerId}:
    put:
      tags:
      - customers
      description: update the object
      operationId: CustomerController.Update
      parameters:
      - in: path
        name: objectId
        description: The objectid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: The body
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    delete:
      tags:
      - customers
      description: delete the object
      operationId: CustomerController.Delete
      parameters:
      - in: path
        name: objectId
        description: The objectId you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: objectId is empty
  /customers/by-imei/{imei}:
    get:
      tags:
      - customers
      description: find customer by customer ID
      operationId: CustomerController.Get
      parameters:
      - in: path
        name: customerID
        description: the customer id you want to get
        required: true
        type: string
      responses:
        "200":
          description: '{customer} models.Customer'
        "403":
          description: :customerID is empty
  /customers/orders/{customerId}:
    get:
      tags:
      - customers
      description: find customer by customer ID
      operationId: CustomerController.Get
      parameters:
      - in: path
        name: customerID
        description: the customer id you want to get
        required: true
        type: string
      responses:
        "200":
          description: '{customer} models.Customer'
        "403":
          description: :customerID is empty
  /customers/pending-orders/{customerId}:
    get:
      tags:
      - customers
      description: find customer by customer ID
      operationId: CustomerController.Get
      parameters:
      - in: path
        name: customerID
        description: the customer id you want to get
        required: true
        type: string
      responses:
        "200":
          description: '{customer} models.Customer'
        "403":
          description: :customerID is empty
  /orders/:
    get:
      tags:
      - orders
      description: get all objects
      operationId: OrderController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    post:
      tags:
      - orders
      description: create object
      operationId: OrderController.Create
      parameters:
      - in: body
        name: body
        description: The object content
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: '{string} models.Object.Id'
        "403":
          description: body is empty
  /orders/{orderID}:
    get:
      tags:
      - orders
      description: find customer by customer ID
      operationId: OrderController.Get
      parameters:
      - in: path
        name: customerID
        description: the customer id you want to get
        required: true
        type: string
      responses:
        "200":
          description: '{customer} models.Customer'
        "403":
          description: :customerID is empty
  /orders/{orderId}:
    put:
      tags:
      - orders
      description: update the object
      operationId: OrderController.Update
      parameters:
      - in: path
        name: objectId
        description: The objectid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: The body
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
  /retailers/:
    get:
      tags:
      - retailers
      description: get all objects
      operationId: RetailerController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    post:
      tags:
      - retailers
      description: create object
      operationId: RetailerController.Create
      parameters:
      - in: body
        name: body
        description: The object content
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: '{string} models.Object.Id'
        "403":
          description: body is empty
  /retailers/{retailerID}:
    get:
      tags:
      - retailers
      description: find retailer by retailer ID
      operationId: RetailerController.Get
      parameters:
      - in: path
        name: retailerID
        description: the retailer id you want to get
        required: true
        type: string
      responses:
        "200":
          description: '{retailer} models.Retailer'
        "403":
          description: :retailerID is empty
  /retailers/{retailerId}:
    put:
      tags:
      - retailers
      description: update the object
      operationId: RetailerController.Update
      parameters:
      - in: path
        name: objectId
        description: The objectid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: The body
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    delete:
      tags:
      - retailers
      description: delete the object
      operationId: RetailerController.Delete
      parameters:
      - in: path
        name: objectId
        description: The objectId you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: objectId is empty
  /retailers/by-code/{code}:
    get:
      tags:
      - retailers
      description: find retailer by retailer ID
      operationId: RetailerController.Get
      parameters:
      - in: path
        name: retailerID
        description: the retailer id you want to get
        required: true
        type: string
      responses:
        "200":
          description: '{retailer} models.Retailer'
        "403":
          description: :retailerID is empty
  /retailers/by-imei/{imei}:
    get:
      tags:
      - retailers
      description: find retailer by retailer ID
      operationId: RetailerController.Get
      parameters:
      - in: path
        name: retailerID
        description: the retailer id you want to get
        required: true
        type: string
      responses:
        "200":
          description: '{retailer} models.Retailer'
        "403":
          description: :retailerID is empty
  /retailers/import:
    post:
      tags:
      - retailers
      description: find retailer by retailer ID
      operationId: RetailerController.Import Retailers
      parameters:
      - in: path
        name: retailerID
        description: the retailer id you want to get
        required: true
        type: string
      responses:
        "200":
          description: '{retailer} models.Retailer'
        "403":
          description: :retailerID is empty
  /retailers/nearby:
    get:
      tags:
      - retailers
      description: find customer by customer ID
      operationId: RetailerController.Get
      parameters:
      - in: path
        name: customerID
        description: the customer id you want to get
        required: true
        type: string
      responses:
        "200":
          description: '{customer} models.Customer'
        "403":
          description: :customerID is empty
  /retailers/orders/{retailerId}:
    get:
      tags:
      - retailers
      description: find retailer by retailer ID
      operationId: RetailerController.Get
      parameters:
      - in: path
        name: retailerID
        description: the retailer id you want to get
        required: true
        type: string
      responses:
        "200":
          description: '{retailer} models.Retailer'
        "403":
          description: :retailerID is empty
  /retailers/pending-orders/{retailerId}:
    get:
      tags:
      - retailers
      description: find customer by customer ID
      operationId: RetailerController.Get
      parameters:
      - in: path
        name: customerID
        description: the customer id you want to get
        required: true
        type: string
      responses:
        "200":
          description: '{customer} models.Customer'
        "403":
          description: :customerID is empty
  /services/:
    get:
      tags:
      - services
      description: get all objects
      operationId: ServiceController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    post:
      tags:
      - services
      description: create object
      operationId: ServiceController.Create
      parameters:
      - in: body
        name: body
        description: The object content
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: '{string} models.Object.Id'
        "403":
          description: body is empty
  /services/{serviceID}:
    get:
      tags:
      - services
      description: find service by service ID
      operationId: ServiceController.Get
      parameters:
      - in: path
        name: serviceID
        description: the service id you want to get
        required: true
        type: string
      responses:
        "200":
          description: '{service} models.Service'
        "403":
          description: :serviceID is empty
  /services/{serviceId}:
    put:
      tags:
      - services
      description: update the object
      operationId: ServiceController.Update
      parameters:
      - in: path
        name: objectId
        description: The objectid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: The body
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    delete:
      tags:
      - services
      description: delete the object
      operationId: ServiceController.Delete
      parameters:
      - in: path
        name: objectId
        description: The objectId you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: objectId is empty
  /tests/:
    get:
      tags:
      - tests
      description: get all objects
      operationId: TestController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
definitions:
  models.Object:
    title: Object
    type: object
    properties:
      ObjectId:
        type: string
      PlayerName:
        type: string
      Score:
        type: integer
        format: int64
tags:
- name: retailers
  description: |
    Operations about object
- name: customers
  description: |
    Operations about object
- name: orders
  description: |
    Operations about object
- name: services
  description: |
    Operations about object
